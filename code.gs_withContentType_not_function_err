function doGet() {
  return HtmlService.createHtmlOutputFromFile('index');
}

function doPost(e) {
  try {
    Logger.log("doPost が実行されました。e: " + JSON.stringify(e));

    let formData;
    if (e && e.postData && e.postData.contents) {
      try {
        formData = JSON.parse(e.postData.contents);
        Logger.log("受信したデータ (JSON.parse後): " + JSON.stringify(formData));
      } catch (parseError) {
        Logger.log("JSON パースエラー: " + parseError);
        return createJsonOutput({ message: "送信されたデータが不正な形式です。", status: "error" });
      }
    } else {
      Logger.log("postData がありません。e の内容: " + JSON.stringify(e)); // e の内容をログに出力
      return createJsonOutput({ message: "データが送信されていません。", status: "error" });
    }

    if (!formData || !formData.startTime || !formData.endTime || !formData.email || !formData.name) {
      return createJsonOutput({ message: "必須項目が不足しています。", status: "error" });
    }

    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const timezone = ss.getSpreadsheetTimeZone();

    const startTime = new Date(formData.startTime);
    const endTime = new Date(formData.endTime);

    const startTimeInTimeZone = convertDateToTimeZone(startTime, timezone);
    const endTimeInTimeZone = convertDateToTimeZone(endTime, timezone);

    const overlapResult = checkCalendarOverlap(startTimeInTimeZone, endTimeInTimeZone);
    if (overlapResult && overlapResult.status === "error") {
      return createJsonOutput(overlapResult);
    }

    const submitResult = submitFormDataToSpreadsheetAndCalendar(formData, startTimeInTimeZone, endTimeInTimeZone);
    return createJsonOutput(submitResult);

  } catch (error) {
    Logger.log("doPost でエラーが発生: " + error + "\nStack: " + error.stack); // スタックトレースを出力
    return createJsonOutput({ message: "システムエラーが発生しました: " + error.message, status: "error" });
  }
}

function convertDateToTimeZone(date, targetTimeZone) {
  return new Date(date.toLocaleString("en-US", { timeZone: targetTimeZone }));
}

function checkCalendarOverlap(startTime, endTime) {
  try {
    const calendarId = PropertiesService.getScriptProperties().getProperty('CALENDAR_ID');
    if (!calendarId) {
      return { message: "カレンダーIDが設定されていません。", status: "error" };
    }
    const calendar = CalendarApp.getCalendarById(calendarId);

    const existingEvents = calendar.getEvents(startTime, endTime);
    if (existingEvents.length >= 5) {
      return { message: "この時間帯は既に5件以上予約されています。別の日時を選択してください。", status: "error" };
    }

    return { message: "OK", status: "ok" };
  } catch (error) {
    Logger.log("カレンダー重複チェックでエラー: " + error);
    return { message: "カレンダーの取得に失敗しました: " + error, status: "error" };
  }
}

function submitFormDataToSpreadsheetAndCalendar(formData, startTime, endTime) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName("フォームの回答 1");
    const TimeStamp = new Date();

    sheet.appendRow([TimeStamp, formData.email, formData.equipment, formData.name, formData.phone, startTime, endTime, formData.remarks]);

    const calendarId = PropertiesService.getScriptProperties().getProperty('CALENDAR_ID');
    const calendar = CalendarApp.getCalendarById(calendarId);

    const event = calendar.createEvent(
      "予約：" + formData.name + " 様",
      startTime,
      endTime,
      { description: formData.remarks }
    );

    return { message: "予約が完了しました。", eventId: event.getId(), status: "ok" };

  } catch (error) {
    Logger.log("データ保存またはカレンダー登録でエラー: " + error);
    return { message: "予約処理中にエラーが発生しました：" + error, status: "error" };
  }
}

function createJsonOutput(data) {
  return ContentService.createTextOutput(JSON.stringify(data)).setMimeType(ContentService.MimeType.JSON);
}


function testTimeZoneConversion() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const timezone = ss.getSpreadsheetTimeZone();
  Logger.log("スプレッドシートのタイムゾーン: " + timezone);

  const testDateUTC = new Date("2024-07-26T10:00:00.000Z"); // UTC 2024年7月26日 10:00
  Logger.log("テスト日付 (UTC): " + testDateUTC.toUTCString());

  const testDateInTimeZone = convertDateToTimeZone(testDateUTC, timezone);
  Logger.log("タイムゾーン変換後の日付: " + testDateInTimeZone.toString());

  // 日本時間 (Asia/Tokyo) でのテスト
  const testDateInTokyo = convertDateToTimeZone(testDateUTC, "Asia/Tokyo");
  Logger.log("東京時間変換後の日付: " + testDateInTokyo.toString());

  // 他のタイムゾーンでのテスト (必要に応じて追加)
  const testDateInNewYork = convertDateToTimeZone(testDateUTC, "America/New_York");
  Logger.log("ニューヨーク時間変換後の日付: " + testDateInNewYork.toString());
}